package main

import "fmt"
import (
	"log"
	"regexp"
	"strconv"
)

/*
The four adjacent digits in the 1000-digit number that have the
greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the
greatest product. What is the value of this product?

*/

func main() {


	number := `73167176531330624919225119674426574742355349194934
	96983520312774506326239578318016984801869478851843
	85861560789112949495459501737958331952853208805511
	12540698747158523863050715693290963295227443043557
	66896648950445244523161731856403098711121722383113
	62229893423380308135336276614282806444486645238749
	30358907296290491560440772390713810515859307960866
	70172427121883998797908792274921901699720888093776
	65727333001053367881220235421809751254540594752243
	52584907711670556013604839586446706324415722155397
	53697817977846174064955149290862569321978468622482
	83972241375657056057490261407972968652414535100474
	82166370484403199890008895243450658541227588666881
	16427171479924442928230863465674813919123162824586
	17866458359124566529476545682848912883142607690042
	24219022671055626321111109370544217506941658960408
	07198403850962455444362981230987879927244284909188
	84580156166097919133875499200524063689912560717606
	05886116467109405077541002256983155200055935729725
	71636269561882670428252483600823257530420752963450`

	var n2 [1000]int64 = addNumbers(number)


	fmt.Println("greatest product:",gP(n2))

}


func addNumbers(number string) [1000]int64{
	//removing whitespace from number string



	var t [1000]int64 // only digit from number string
	re := `[0-9]`
	var v = regexp.MustCompile(re)
	zm := 0

	for _, i := range number {

		if v.MatchString(string(i)) {

			n, err := strconv.ParseInt(v.FindString(string(i)),10,64)

			if err != nil {
				log.Fatal(err)
			}

			t[zm] = n
			zm++
		}

	}

	return t

}

func gP(n2 [1000]int64) int64{


	var p1 int64= 1
	var p2 int64= 0


	for j := 0; j < len(n2)-12; j++ {

		for k := j; k < j+13; k++ {
			p1 = p1*n2[k]
			//fmt.Print(n2[k],"*")
		}
		//fmt.Print("=",p1,"\n")

		if p1 > p2 {
			p2 = p1
		}

		p1 =1
	}

	return p2

}